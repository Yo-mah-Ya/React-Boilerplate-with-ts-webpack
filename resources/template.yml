AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Parameters:
  APIGatewayStageName:
    Type: String
  bucketName:
    Type: String

Resources:
  #-------------------------------------------------------
  #   API Gateway
  #-------------------------------------------------------
  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub ${APIGatewayRole.Arn}

  APIGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      # access logging
      # https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference?cmpid=docs_apigateway_console
      AccessLogSetting:
        DestinationArn: !Sub ${APIGatewayAccessLogGroup.Arn}
        Format: '{ "requestId":"$context.requestId", "extendedRequestId":"$context.extendedRequestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      Name: api_gateway
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yml
      MethodSettings:
        # execution logging
        # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html
        - DataTraceEnabled: true
          LoggingLevel: ERROR
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
      TracingEnabled: true
      StageName: !Sub ${APIGatewayStageName}

  APIGatewayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TargetLambdaFunction
      Principal: apigateway.amazonaws.com

  #-------------------------------------------------------
  #   CloudWatch LogGroup
  #-------------------------------------------------------
  APIGatewayExecutionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Execution-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub API-Gateway-Access-Logs_${APIGatewayRestApi}/${APIGatewayStageName}

  TargetLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TargetLambdaFunction}

  #-------------------------------------------------------
  #   Lambda
  #-------------------------------------------------------
  TargetLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/lambda_handler
      FunctionName: lambda_handler
      Handler: lambda_handler.lambda_handler
      MemorySize: 128
      Role: !Sub ${LambdaRole.Arn}
      Runtime: python3.9
      Timeout: 1
      Tracing: Active
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  # ------------------------------------------------------------#
  # IAM
  # ------------------------------------------------------------#
  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /
      RoleName: APIGatewayRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      RoleName: LambdaRole

  # ------------------------------------------------------------#
  #  S3
  # ------------------------------------------------------------#
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${bucketName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # WebsiteConfiguration:
      #   IndexDocument: index.html
      #   ErrorDocument: index.html
      # CorsConfiguration:
      #   CorsRules:
      #     - AllowedHeaders:
      #         - Authorization
      #         - Content-Length
      #       AllowedMethods:
      #         - GET
      #       AllowedOrigins:
      #         - "*"
      #       MaxAge: 3000

  PrivateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OriginAccessIdentity
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: !Sub |-
        {
          "Id": "CloudFrontPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "APIReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": "${OriginAccessIdentity.S3CanonicalUserId}"
              },
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::${S3Bucket}/*"
            }
          ]
        }

  # ------------------------------------------------------------#
  #  CloudFront
  # ------------------------------------------------------------#
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOriginAccessIdentityConfig

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3Bucket
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        # Origin
        Origins:
          - # DomainName: !GetAtt S3Bucket.DomainName
            # https://aws.amazon.com/premiumsupport/knowledge-center/s3-http-307-response/
            DomainName: !Sub ${S3Bucket}.s3-${AWS::Region}.amazonaws.com
            Id: !Sub ${S3Bucket}.s3-${AWS::Region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
          - DomainName: !Sub ${APIGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
            Id: !Sub ${APIGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: !Sub /${APIGatewayStageName}
            CustomOriginConfig:
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: https-only
              OriginReadTimeout: 3
              OriginSSLProtocols:
                - TLSv1.1
                - TLSv1.2
        DefaultRootObject: index.html
        # Cache Behavior
        CacheBehaviors:
          - PathPattern: /api
            TargetOriginId: !Sub ${APIGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com
            Compress: false
            # viewer
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            ## Cache key and origin requests
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            # DefaultTTL: 0
            # ForwardedValues:
            #   Cookies: Cookies
            #   Headers:
            #     - String
            #   QueryString: Boolean
            #   QueryStringCacheKeys:
            #     - String
            # MaxTTL: 0
            # MinTTL: 0
            ## Additional settings
            SmoothStreaming: false
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${S3Bucket}.s3-${AWS::Region}.amazonaws.com
          Compress: true
          # viewer
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ## Cache key and origin requests
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          ForwardedValues:
            QueryString: false
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
        Enabled: true
        # Distribution Settings
        HttpVersion: http2
        # CustomErrorResponses:
        #   - ErrorCachingMinTTL: 300
        #     ErrorCode: 400
        #     ResponseCode: 200
        #     ResponsePagePath: /
        #   - ErrorCachingMinTTL: 300
        #     ErrorCode: 403
        #     ResponseCode: 200
        #     ResponsePagePath: /
        #   - ErrorCachingMinTTL: 300
        #     ErrorCode: 404
        #     ResponseCode: 200
        #     ResponsePagePath: /

Outputs:
  Region:
    Value: !Sub ${AWS::Region}
  HostingBucketName:
    Description: Hosting bucket name
    Value: !Sub ${S3Bucket}
  WebsiteURL:
    Value: !Sub ${S3Bucket.WebsiteURL}
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Sub https://${S3Bucket.DomainName}
    Description: Name of S3 bucket to hold website content
  CloudFrontDistributionID:
    Value: !Sub ${CloudFrontDistribution}
  CloudFrontDomainName:
    Value: !Sub ${CloudFrontDistribution.DomainName}
  CloudFrontSecureURL:
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  CloudFrontOriginAccessIdentity:
    Value: !Sub ${OriginAccessIdentity}
